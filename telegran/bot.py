import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
(API_KEY, EMAIL, JOB_TITLE, TEAM_LEAD_ID,
 WORK_SIZE, COLLABORATORS, FINISH, JOB_ID) = range(8)
BASE_API_URL = "http://127.0.0.1:5000"

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ Liridius.\n\n"
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_api_key - –°–æ–∑–¥–∞—Ç—å API-–∫–ª—é—á\n"
        "/add_job - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/delete_job - –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/get_jobs - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç\n"
        "/get_job <id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ\n"
        "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –ü–æ–º–æ—â—å"
    )

# ================== –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ==================

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = context.user_data
    stats = {
        'email': user_data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'api_key': user_data.get('api_key', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
        'jobs_added': user_data.get('jobs_count', 0),
        'jobs_deleted': user_data.get('deleted_count', 0)
    }
    
    message = (
        "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n"
        f"üìß Email: `{stats['email']}`\n"
        f"üîë API-–∫–ª—é—á: `{stats['api_key']}`\n"
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—Ç: {stats['jobs_added']}\n"
        f"‚ùå –£–¥–∞–ª–µ–Ω–æ —Ä–∞–±–æ—Ç: {stats['jobs_deleted']}"
    )
    await update.message.reply_text(message, parse_mode="Markdown")

# ================== –°–û–ó–î–ê–ù–ò–ï API –ö–õ–Æ–ß–ê ==================

async def create_api_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

async def process_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text
    try:
        response = requests.post(
            f"{BASE_API_URL}/api/api_key/reg_api",
            params={"email": email}
        )

        if response.status_code == 200:
            api_key = response.json().get("apikey")
            context.user_data.update({
                'email': email,
                'api_key': api_key
            })
            await update.message.reply_text(f"üîë –í–∞—à API –∫–ª—é—á: {api_key}")
        else:
            error = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")

    return ConversationHandler.END

# ================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–´ ==================

async def add_job_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á:")
    return API_KEY

async def process_api_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["api_key"] = update.message.text
    await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

async def process_email_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["email"] = update.message.text
    await update.message.reply_text("üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:")
    return JOB_TITLE

async def process_job_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["job_title"] = update.message.text
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—á–∏—Å–ª–æ):")
    return TEAM_LEAD_ID

async def process_team_lead_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        team_lead_id = int(update.message.text)
        context.user_data["team_lead_id"] = team_lead_id
        await update.message.reply_text("‚è≥ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã (—á–∏—Å–ª–æ):")
        return WORK_SIZE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        return TEAM_LEAD_ID

async def process_work_size(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        work_size = int(update.message.text)
        context.user_data["work_size"] = work_size
        await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        return COLLABORATORS
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        return WORK_SIZE

async def process_collaborators(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["collaborators"] = update.message.text
    await update.message.reply_text("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞? (–¥–∞/–Ω–µ—Ç):")
    return FINISH

async def process_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    finish = update.message.text.lower()
    if finish in ["–¥–∞", "yes"]:
        context.user_data["finish"] = True
    elif finish in ["–Ω–µ—Ç", "no"]:
        context.user_data["finish"] = False
    else:
        await update.message.reply_text('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"!')
        return FINISH

    params = {
        "apikey": context.user_data["api_key"],
        "email": context.user_data["email"],
        "job_title": context.user_data["job_title"],
        "team_lead_id": context.user_data["team_lead_id"],
        "work_size": context.user_data["work_size"],
        "collaborators": context.user_data["collaborators"],
        "finish": context.user_data["finish"]
    }

    try:
        response = requests.post(f"{BASE_API_URL}/api/jobs/add", params=params)
        if response.status_code == 200:
            context.user_data['jobs_count'] = context.user_data.get('jobs_count', 0) + 1
            await update.message.reply_text("‚úÖ –†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            error = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")

    return ConversationHandler.END

# ================== –£–î–ê–õ–ï–ù–ò–ï –†–ê–ë–û–¢–´ ==================

async def delete_job_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á:")
    return API_KEY

async def process_api_key_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["api_key"] = update.message.text
    await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ email:")
    return EMAIL

async def process_email_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["email"] = update.message.text
    await update.message.reply_text("üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–±–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return JOB_ID

async def process_job_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        job_id = int(update.message.text)
        params = {
            "apikey": context.user_data["api_key"],
            "email": context.user_data["email"],
            "job_id": job_id
        }
        response = requests.delete(
            f"{BASE_API_URL}/api/jobs/delete", params=params)

        if response.status_code == 200:
            context.user_data['deleted_count'] = context.user_data.get('deleted_count', 0) + 1
            await update.message.reply_text("‚úÖ –†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            error = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return JOB_ID
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

    return ConversationHandler.END

# ================== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ==================

async def get_jobs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        response = requests.get(f"{BASE_API_URL}/api/jobs/")
        if response.status_code == 200:
            jobs = response.json()
            if jobs:
                message = "\n".join(
                    [f"ID: {job['id']}, üè∑ {job['Job_Title']}" for job in jobs]
                )
            else:
                message = "üì≠ –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –ø—É—Å—Ç"
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")

async def get_job(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        job_id = int(context.args[0])
        response = requests.get(f"{BASE_API_URL}/api/jobs/{job_id}")

        if response.status_code == 200:
            job = response.json()
            message = (
                f"üÜî ID: {job['id']}\n"
                f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {job['Job_Title']}\n"
                f"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {job['Team_lead_id']}\n"
                f"‚è≥ –û–±—ä–µ–º: {job['Work_Size']} —á–∞—Å–æ–≤\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {job['Collaborators']}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if job['finish'] else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
            )
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except (IndexError, ValueError):
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_job <ID>")
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

# ================== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==================

def main() -> None:
    application = ApplicationBuilder().token("7956890852:AAE6RzlXvyvr4RGB0IVUL2kZzSO9gavalo4").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("get_jobs", get_jobs))
    application.add_handler(CommandHandler("get_job", get_job))
    application.add_handler(CommandHandler("profile", show_profile))
    application.add_handler(CommandHandler("help", start))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler
    conv_handlers = [
        ConversationHandler(
            entry_points=[CommandHandler("create_api_key", create_api_key)],
            states={EMAIL: [MessageHandler(filters.TEXT, process_email)]},
            fallbacks=[]
        ),
        ConversationHandler(
            entry_points=[CommandHandler("add_job", add_job_start)],
            states={
                API_KEY: [MessageHandler(filters.TEXT, process_api_key)],
                EMAIL: [MessageHandler(filters.TEXT, process_email_add)],
                JOB_TITLE: [MessageHandler(filters.TEXT, process_job_title)],
                TEAM_LEAD_ID: [MessageHandler(filters.TEXT, process_team_lead_id)],
                WORK_SIZE: [MessageHandler(filters.TEXT, process_work_size)],
                COLLABORATORS: [MessageHandler(filters.TEXT, process_collaborators)],
                FINISH: [MessageHandler(filters.TEXT, process_finish)]
            },
            fallbacks=[]
        ),
        ConversationHandler(
            entry_points=[CommandHandler("delete_job", delete_job_start)],
            states={
                API_KEY: [MessageHandler(filters.TEXT, process_api_key_delete)],
                EMAIL: [MessageHandler(filters.TEXT, process_email_delete)],
                JOB_ID: [MessageHandler(filters.TEXT, process_job_id)]
            },
            fallbacks=[]
        )
    ]

    for handler in conv_handlers:
        application.add_handler(handler)

    application.run_polling()

if __name__ == "__main__":
    main()